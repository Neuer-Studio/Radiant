#type vertex
#version 430

layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec3 a_Normals;
layout(location = 2) in vec3 a_Tangent;
layout(location = 3) in vec3 a_Binormal;
layout(location = 4) in vec2 a_TexCoords;

uniform mat4 u_ViewProjection;
uniform mat4 u_Transform;

out VertexOutput
{
    vec3 Normals;
	vec2 TexCoords;
} vs_Output;

void main()
{
    vs_Output.Normals = a_Normals;
    vs_Output.TexCoords = a_TexCoords;

    gl_Position = u_ViewProjection * u_Transform * vec4(a_Position, 1.0);
}

#type fragment
#version 430

in VertexOutput
{
    vec3 Normals;
	vec2 TexCoords;
} vs_Input;

struct Light
{
    vec3 Direction;
    vec3 Radiance;
};

uniform Light u_Light;
uniform vec3 u_CameraPosition;

uniform sampler2D u_AlbedoTexture;

out vec4 o_Color;

vec3 Lighting()
{
	vec3 result = vec3(0.0);
    vec3 ambient = vec3(0.5, 0.5, 0.5);

    vec3 normal = normalize(vs_Input.Normals);
    vec3 lightColor = vec3(u_Light.Radiance); 
    vec3 lightSource = vec3(u_Light.Direction); 

    float diffuseStrength = max(0.0, dot(lightSource, normal));
    vec3 diffuse = diffuseStrength * lightColor;

    vec3 cameraSource = u_CameraPosition;
    vec3 viewSource = normalize(cameraSource);
    vec3 reflectSource = normalize(reflect(-lightSource, normal));
    float specularStrength = max(0.0, dot(viewSource, reflectSource));
    specularStrength = pow(specularStrength, 256.0);
    vec3 specular = specularStrength * lightColor;

    // lighting = ambient + diffuse + specular
    vec3 lighting = vec3(0.0, 0.0, 0.0); // color - black
    // lighting = ambient;
    // lighting = ambient * 0.0 + diffuse;
    // lighting = ambient * 0.0 + diffuse * 0.0 + specular;
    lighting = ambient * + diffuse * 0.5 + specular * 0.5;

    // color = modelColor * lighting
    vec3 modelColor = vec3(0.75, 0.75, 0.75);
    result = modelColor * lighting;

	return result;
}

void main()
{
    vec3 ambient =  texture(u_AlbedoTexture, vs_Input.TexCoords).rgb;
    vec3 light = Lighting() * ambient;
    o_Color = vec4(ambient, 1.0);
}
